<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory-->
	<resources mapping="/bootstrap/**" location="/bootstrap/" />
 	<resources mapping="/theme/**" location="/theme/" />
	<resources mapping="/js/**" location="/js/" />
	<resources mapping="/css/**" location="/css/" />
	<resources mapping="/img/**" location="/img/" />
	 	
	<context:component-scan base-package="com.k4m.eXperdb.webconsole" />

	<!-- file download 
	<beans:bean id="excelDownload" class="com.k4m.eXperdb.webconsole.downloadVeiw.ExcelBuilderView" />
	<beans:bean id="download" class="com.k4m.eXperdb.webconsole.downloadVeiw.DownloadView" />
	<beans:bean id="downloadPimReport" class="com.k4m.eXperdb.webconsole.downloadVeiw.PimReportDownloadView" />
	-->
	
	<beans:bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<beans:property name="messageConverters">
			<beans:list>
				<beans:ref bean="jsonConverter" />
			</beans:list>
		</beans:property>
	</beans:bean>

	<beans:bean id="jsonConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<beans:property name="supportedMediaTypes" value="application/json" />
	</beans:bean>
	
	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="0" />
	</beans:bean>
	
	<beans:bean id="tilesViewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="viewClass"
			value="org.springframework.web.servlet.view.tiles2.TilesView" />
		<beans:property name="order" value="1" />
	</beans:bean>

	<beans:bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/tiles.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>

	<beans:bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/jsp/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2" />
	</beans:bean>
	
	
	
	
	
	
	<!-- Root Context: defines shared resources visible to all other web components -->
<!-- 	poolMaximumActiveConnections : 활성화된 최대 커넥션 수 -->
<!-- 	poolMaximumIdleConnections : 유휴상태에서 최대 커넥션 수 -->
<!-- 	poolMaximumCheckoutTime : 최대 커넥션 획득 시간(ms) -->
<!-- 	poolPingEnabled : 커넥션이 살아있는지 ping 테스트 여부 -->
<!-- 	poolPingQuery : 커넥션 ping 테스트 쿼리 (DB 종류에 따라 적절하게 수정) -->
<!-- 	poolPingConnectionsNotUsedFor : 유휴상태의 커넥션이 닫히는지 판단할 시간(ms) -->
<!-- 	poolTimeToWait : 사용된 커넥션을 기다리는 시간 -->
	<!-- DB 설정  -->
	<beans:bean id="environmentVariablesConfiguration"
		class="org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig">
		<beans:property name="algorithm" value="PBEWithMD5AndDES" />
		<beans:property name="passwordEnvName" value="APP_ENCRYPTION_PASSWORD" />
	</beans:bean>
	
	<beans:bean id="configurationEncryptor"
		class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
		<beans:property name="config" ref="environmentVariablesConfiguration" />
		<beans:property name="password" value="jdbcpw" />
	</beans:bean>
	
	<beans:bean id="propertyConfigurer"
		class="org.jasypt.spring31.properties.EncryptablePropertyPlaceholderConfigurer">
		<beans:constructor-arg ref="configurationEncryptor" />
		<beans:property name="locations">
		<beans:list>
		<beans:value>/WEB-INF/spring/jdbc.properties</beans:value> <!-- properties 파일 위치 -->
		</beans:list>
		</beans:property>
	</beans:bean>
	
	<beans:bean id="dataSource"
		class="org.apache.ibatis.datasource.pooled.PooledDataSource">
		<beans:property name="driver" value="org.postgresql.Driver"></beans:property>
		<beans:property name="url" value="${jdbc.url}?charSet=UNICODE"></beans:property>
		<beans:property name="username" value="${jdbc.username}"></beans:property>
		<beans:property name="password" value="${jdbc.password}"></beans:property>
		<beans:property name="defaultAutoCommit" value="true"></beans:property>
		
		<beans:property name="poolPingQuery" value="select 1"></beans:property>
		<beans:property name="poolPingEnabled" value="true"></beans:property>
		<beans:property name="poolMaximumActiveConnections" value="20"></beans:property>
		<beans:property name="poolMaximumIdleConnections" value="20"></beans:property>
		<beans:property name="poolMaximumCheckoutTime" value="20000"></beans:property>
		<beans:property name="poolPingConnectionsNotUsedFor" value="10000"></beans:property>
		<beans:property name="poolTimeToWait" value="15000"></beans:property>
	</beans:bean>
	<!-- Spring Session Factory를 mybatis와 연계하여 사용하는 메인 설정 부분 mybatis 설정 경로에 설정이 있어야함. -->
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="configLocation" value="classpath:/mybatis/mybatis-config.xml"></beans:property>
		<beans:property name="dataSource" ref="dataSource"></beans:property>
	</beans:bean>
	<!-- mybatis 의 Session Template 관련 설정  -->
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg ref="sqlSessionFactory"></beans:constructor-arg>
	</beans:bean>
	<!-- String Transaction 관련 설정 -->
	<beans:bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource"></beans:property>
	</beans:bean>
	
	<beans:bean name="propertieInitializingBean" class="com.k4m.eXperdb.webconsole.common.DBCPInitalizingBean"/>
	
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- 
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" rollback-for="Exception"/>
			<tx:method name="update*" rollback-for="Exception"/>
			<tx:method name="remove*" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config proxy-target-class="true">
		<aop:pointcut id="serviceOperation" expression="execution(public * com.k4m.eXperdb.webconsole..*ServiceImpl.*(..))" />
		<aop:advisor id="transactionAdvisor" pointcut-ref="serviceOperation" advice-ref="txAdvice"/>
	</aop:config>
	 -->
</beans:beans>
